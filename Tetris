#include<iostream>
#include<vector>
#include<conio.h>
#include<windows.h>
#include<cstdlib>
#include<ctime>
#include<algorithm>

#define TABLE_X 20
#define TABLE_Y 38

#define LEFT 75
#define RIGHT 77
#define UP 72
#define DOWN 80

//커서숨기기0 커서보이기 1
void CursorView(char show) {
	HANDLE hConsole;
	CONSOLE_CURSOR_INFO ConsoleCursor;

	hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	ConsoleCursor.bVisible = show;
	ConsoleCursor.dwSize = 1;

	SetConsoleCursorInfo(hConsole, &ConsoleCursor);
}

//콘솔커서 위치 이동
void gotoxy(int x, int y) {
	COORD pos = { x,y };
	SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), pos);
}

//1번 블록, 바로위에 코맨트를 남기면 나중에 마우슬 올렷을때 설명이 든다.
const int block1[4][4][4] = {
	{
		{0,0,0,0},
		{0,0,0,0},
		{2,2,2,2},
		{0,0,0,0}
	},

	{
		{0,0,2,0},
		{0,0,2,0},
		{0,0,2,0},
		{0,0,2,0}
	},

	{
		{0,0,0,0},
		{0,0,0,0},
		{2,2,2,2},
		{0,0,0,0}
	},

	{
		{0,0,2,0},
		{0,0,2,0},
		{0,0,2,0},
		{0,0,2,0}
	},

};

const int block2[4][4][4] = {
	{
		{0,0,0,0},
		{0,2,2,0},
		{0,2,2,0},
		{0,0,0,0}
	},

	{
		{0,0,0,0},
		{0,2,2,0},
		{0,2,2,0},
		{0,0,0,0}
	},

	{
		{0,0,0,0},
		{0,2,2,0},
		{0,2,2,0},
		{0,0,0,0}
	},

	{
		{0,0,0,0},
		{0,2,2,0},
		{0,2,2,0},
		{0,0,0,0}
	},

};

const int block3[4][4][4] = {
	{
		{0,2,0,0},
		{0,2,0,0},
		{0,2,2,0},
		{0,0,0,0}
	},

	{
		{0,0,0,0},
		{0,2,2,2},
		{0,2,0,0},
		{0,0,0,0}
	},

	{
		{0,2,2,0},
		{0,0,2,0},
		{0,0,2,0},
		{0,0,0,0}
	},

	{
		{0,0,0,0},
		{0,0,2,0},
		{2,2,2,0},
		{0,0,0,0}
	},

};

const int block4[4][4][4] = {
	{
		{0,0,0,0},
		{0,2,0,0},
		{0,2,2,0},
		{0,0,2,0}
	},

	{
		{0,0,0,0},
		{0,2,2,0},
		{2,2,0,0},
		{0,0,0,0}
	},

	{
		{0,0,0,0},
		{0,2,0,0},
		{0,2,2,0},
		{0,0,2,0}
	},

	{
		{0,0,0,0},
		{0,2,2,0},
		{2,2,0,0},
		{0,0,0,0}
	},

};

const int block5[4][4][4] = {
	{
		{0,0,0,0},
		{0,2,2,2},
		{0,0,2,0},
		{0,0,0,0}
	},

	{
		{0,0,2,0},
		{0,2,2,0},
		{0,0,2,0},
		{0,0,0,0}
	},

	{
		{0,0,2,0},
		{0,2,2,2},
		{0,0,0,0},
		{0,0,0,0}
	},

	{
		{0,0,2,0},
		{0,0,2,2},
		{0,0,2,0},
		{0,0,0,0}
	},

};

//부모블럭 클래스

class Block {
protected:
	int shape[4][4][4];
	int x;
	int y;
	int rotationCount;

public:
	int getShape(int rotationCount, int y, int x) {
		return shape[rotationCount][y][x];
	}

	int getX() {
		return x;
	}
	int getY() {
		return y;
	}

	int getRotationCount() {
		return rotationCount;
	}

	void down() {
		y++;
	}
	void left() {
		x--;
	}
	void right() {
		x++;
	}
	void rotate() {
		rotationCount = (rotationCount + 1) % 4;
	}//0,1,2,3 으로 회전 표현
	void setX(int x) {
		this->x = x;
	}
	void setY(int y) {
		this->y = y;
	}
	void setRotationCount(int r) {
		this->rotationCount = r;
	}
	void setShape(int r, int y, int x, int value) {
		this->shape[r][y][x] = value;
	}

};
//대소문자가 다르다. 1번 블록 클래스
class Block1 :public Block {
public:

	Block1() {
		x = TABLE_X / 2 - 3;
		y = 1;
		rotationCount = 0;
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				for (int k = 0; k < 4; k++) {
					shape[i][j][k] = block1[i][j][k];
				}
			}
		}

	}
};

// 2번 블록 클래스
class Block2 :public Block {
public:

	Block2() {
		x = TABLE_X / 2 - 3;
		y = 1;
		rotationCount = 0;
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				for (int k = 0; k < 4; k++) {
					shape[i][j][k] = block2[i][j][k];
				}
			}
		}

	}
};

// 3번 블록 클래스
class Block3 :public Block {
public:

	Block3() {
		x = TABLE_X / 2 - 3;
		y = 1;
		rotationCount = 0;
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				for (int k = 0; k < 4; k++) {
					shape[i][j][k] = block3[i][j][k];
				}
			}
		}

	}
};

// 4번 블록 클래스
class Block4 :public Block {
public:

	Block4() {
		x = TABLE_X / 2 - 3;
		y = 1;
		rotationCount = 0;
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				for (int k = 0; k < 4; k++) {
					shape[i][j][k] = block4[i][j][k];
				}
			}
		}

	}
};

// 5번 블록 클래스
class Block5 :public Block {
public:

	Block5() {
		x = TABLE_X / 2 - 3;
		y = 1;
		rotationCount = 0;
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				for (int k = 0; k < 4; k++) {
					shape[i][j][k] = block5[i][j][k];
				}
			}
		}

	}
};





class MainMenu {
public:
	MainMenu() {
		//생성자
		using namespace std;

		cout << "\n\n\n\n";
		cout << "\t\t" << "@@@@@ @@@@@ @@@@@ @@@@  @@@  @@@ " << endl;
		cout << "\t\t" << "  @   @       @   @   @  @  @    " << endl;
		cout << "\t\t" << "  @   @@@@@   @   @@@@   @   @@@ " << endl;
		cout << "\t\t" << "  @   @       @   @  @   @      @" << endl;
		cout << "\t\t" << "  @   @@@@@   @   @   @ @@@  @@@ " << endl;
		cout << "\n\n\t\t-시작하려면 아무키나 눌러주세요-" << endl;
		//그냥 getchar만 해도 입력 받을때까지 대기라서 상관없긴 하다.
		char tempCatcher = getchar();
		if (tempCatcher) {
			system("cls");
		}
	}

};



class backup {
public:
	//블럭백업
	static void updateBlock(Block* source, Block& backupBlock) {
		backupBlock.setX(source->getX());
		backupBlock.setY(source->getY());
		backupBlock.setRotationCount(source->getRotationCount());
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				for (int k = 0; k < 4; k++) {
					backupBlock.setShape(i, j, k, source->getShape(i, j, k));
				}
			}
		}
	}
	//테이블백업
	static void updateTable(std::vector<std::vector<int>>& source, std::vector<std::vector<int>>& backupTable) {
		backupTable.resize(source.size(), std::vector<int>(source.size()));
		copy(source.begin(), source.end(), backupTable.begin());
	}


};

class GameTable {
private:
	int x; // 가로
	int y; // 세로
	Block* blockObject; //다형성을 위한 포인터
	std::vector<std::vector<int>> table; // 테이블 판 0 = " ", 1 = "▦" , 2  = "■"
public:
	GameTable(int x, int y) { //테트리스 판 뼈대 생성
		this->x = x;
		this->y = y;
		for (int i = 0; i < y; i++) {
			std::vector<int> temp;
			for (int j = 0; j < x; j++) {
				temp.push_back(0);//x축 한줄을 채운다.
			}
			table.push_back(temp);//x축을 y 축 높이 만큼 세운다
		}
		//가장 자리 뼈대 색칠
		for (int i = 0; i < x; i++) {
			table[0][i] = 1;
			table[y - 1][i] = 1;
		}
		for (int i = 1; i < y - 1; i++) {
			table[i][0] = 1;
			table[i][x - 1] = 1;
		}
	}
	/*게임판 그리는 함수*/
	void DrawGameTable() {
		for (int i = 0; i < y; i++) {
			for (int j = 0; j < x; j++) {
				if (table[i][j] == 1)std::cout << "▦";
				else std::cout << "  "; // 두 칸 띄우기
			}
			std::cout << "\n";

		}
	}
	//여기는 메모리에 담겨진 숫자를 그래픽으로 바꿔주는 역할을 한다. 그래픽 구현창

	//블럭생성
	void createBlock() {
		srand((unsigned int)time(NULL));
		int select = rand() % 5 + 1; // 1~5 블록
		if (select == 1) {
			blockObject = new Block1();
		}
		else if (select == 2) {
			blockObject = new Block2();
		}
		else if (select == 3) {
			blockObject = new Block3();
		}
		else if (select == 4) {
			blockObject = new Block4();
		}
		else if (select == 5) {
			blockObject = new Block5();
		}

		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				int Y = j + blockObject->getY();
				int X = i + blockObject->getX();
				table[Y][X] = blockObject->getShape(blockObject->getRotationCount(), i, j);
				//블럭객체를 테이블에 업데이트
			}
		}
	}
	
	void MoveBlock(int key) {

		Block backupBlock;
		std::vector<std::vector<int>> backupTable;
		backup::updateBlock(blockObject, backupBlock);
		backup::updateTable(table, backupTable);


		//테이블에서 블럭 개체 지우기
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				int Y = j + blockObject->getY();
				int X = i + blockObject->getX();
				if (table[Y][X] == 2) {
					table[Y][X] = 0;
				}
			}
		}
		//블럭이동
		if (key == DOWN) {
			blockObject->down();
		}
		else if (key == LEFT) { blockObject->getY(); }
		else if (key == RIGHT) { blockObject->getX(); }


		//회전한 블럭 상태를 테이블에 갱신
		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				int Y = j + blockObject->getY();
				int X = i + blockObject->getX();
				int blockValue = blockObject->getShape(blockObject->getRotationCount(), i, j);

				if (blockValue != 2) { continue; }
				//여기서 부터 이어서 할것
				if (table[Y][X] == 0) {
					table[Y][X] = blockObject->getShape(blockObject->getRotationCount(), i, j);
				}
				else if (table[Y][X] == 1) {
					copy(backupTable.begin(), backupTable.end(), table.begin());
					blockObject->setRotationCount(backupBlock.getRotationCount());
					return;
				}
			}
		}

	}

	void RotateBlock() {
		blockObject->rotate();

		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				int Y = j + blockObject->getY();
				int X = i + blockObject->getX();
				if (table[Y][X] == 0) {
					table[Y][X] = blockObject->getShape(blockObject->getRotationCount(), i, j);
				}

			}
		}
	}

};
//게임시작 클래스
class GamePlay {
private:
	GameTable* gt;
public:
	GamePlay() {
		gt = new GameTable(TABLE_X, TABLE_Y);//게임판 그리기 객체 생성
		gt->createBlock();//초기 블럭생성
		gt->DrawGameTable();//게임판을 그린다.

		while (1) {
			int nSelect;
			if (_kbhit()) {
				nSelect = _getch();
				if (nSelect == 224) {
					switch (nSelect) {
					case UP:
						gt->RotateBlock();//블럭을 90도 회전
						gotoxy(0, 0);
						gt->DrawGameTable();
						break;

					case DOWN:
						gt->MoveBlock(DOWN);//블럭을 한칸 아래로 이동
						gotoxy(0, 0);
						gt->DrawGameTable();
						break;

					case LEFT:
						gt->MoveBlock(LEFT);//블럭을 90도 회전
						gotoxy(0, 0);
						gt->DrawGameTable();
						break;

					case RIGHT:
						gt->MoveBlock(RIGHT);//블럭을 90도 회전
						gotoxy(0, 0);
						gt->DrawGameTable();
						break;
					}
					
				}
			}
		}
	}
	~GamePlay() {
		delete gt;
	}
};



int main() {
	CursorView(0);
	system("mode con cols=100 lines=40 | title 테트리스 게임");//콘솔창 크기 및 제목설정
	GameTable gt(TABLE_X, TABLE_Y);
	MainMenu();
	GamePlay();
	getchar();
	return 0;
}


